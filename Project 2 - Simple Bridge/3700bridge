#!/usr/bin/env python3

import asyncio
import cProfile
import pstats
import socket
import select
import json
import argparse
import datetime
from enum import Enum
from bpdu import BPDU


# accepts an error param and prints a debug log
def error_log(error: str):
    print(f"[ERROR] {error}")


# This object represents a bridge, It is responsible for building the minimum spanning tree.
class Bridge:
    # init bridge object with data for first BPDU. At the start, bridge believes it is the root
    # and cost to root is 0 and all ports are enabled
    def __init__(self, ports: list, bridge_id: str, socket_to_port: dict, port_id_to_portObj: dict):
        """
        This class represents a bridge and handles all logic for building a forwarding table and executing the
        spanning tree algorithm
        :param ports: List of Port objects
        :param bridge_id: ID of this bridge
        """
        # list of all ports on this bridge
        self.ports = ports
        self.bridge_id = bridge_id
        self.root = bridge_id
        self.root_cost = 0
        self.socket_to_port = socket_to_port
        # dictionary that maps each destination to port object
        self.forwarding_table = {}
        # this maps a port id to the object of class Port
        self.port_id_to_portObj = port_id_to_portObj
        # keeps track of the time when the last BPDU was sent from this bridge
        self.last_bpdu_sent = datetime.datetime.now()

    # returns a serialized BPDU for this bridge from the port given as the argument
    def get_bpdu(self, port_sent_from: int) -> BPDU:
        return BPDU(self.root, self.root_cost, self.bridge_id, port_sent_from)

    def update_designated_port_status(self):
        """
        Update ports as designated port if they are not the root port and their best BPDU is better than all
        the BPDUs heard by them
        Disables all non designated and non root ports
        :return: None
        """
        for port in self.ports:
            if port.status != PortStatus.ROOT:
                designated = False
                bridge_best_bpdu = self.get_bpdu(port.id)
                if len(port.bpdus_received) == 0 or bridge_best_bpdu < port.get_best_bpdu():
                    designated = True
                if not designated:
                    port.status = PortStatus.DISABLED
                    print(f"Disabled port {port.id}", flush=True)
                else:
                    port.status = PortStatus.DESIGNATED
                    print(f"Designated port {port.id}", flush=True)

    # resets forwarding table
    def flush_table(self):
        self.forwarding_table = {}

    def update(self, bpdu: dict, port_id: int):
        """
        :param bpdu: The BPDU that was received in JSON format
        :param port_id: The 0-indexed id of the port that the message was heard on
        :return: None

        This method performs the logic required to reconfigure the spanning tree when a new BPDU is heard.
        The method also takes care of filtering out the cases where no update is needed to the root or root port on the bridge

        """
        port_received_on = self.port_id_to_portObj[port_id]
        flush_table = port_received_on.try_to_add_new_bpdu(bpdu["message"])
        send_bpdus = False
        if flush_table:
            self.flush_table()
            send_bpdus = True
        best_bpdu_received, port_heard_on = self.best_bpdu_over_all()
        if best_bpdu_received:
            if best_bpdu_received > self.get_bpdu(0):
                print("Root port: None", flush=True)
            else:
                if best_bpdu_received.root != self.bridge_id:
                    # rebroadcast BPDU if better root is found or better path to same root is found
                    if best_bpdu_received.root != self.root or (best_bpdu_received.root == self.root and
                                                                best_bpdu_received.cost + 1 < self.root_cost):
                        send_bpdus = True
                    self.update_root_port(best_bpdu_received, port_heard_on)
            self.update_designated_port_status()
            if send_bpdus or (datetime.datetime.now() - self.last_bpdu_sent).total_seconds() > 0.5:
                self.send_bpdus()
        else:
            self.set_all_ports_as_designated()
            self.root = self.bridge_id
            self.root_cost = 0
            self.send_bpdus()

    # sets all ports as designated ports
    def set_all_ports_as_designated(self):
        for port in self.ports:
            port.status = PortStatus.DESIGNATED

    # returns the best bpdu that this bridge has heard and the port it was heard on. Returns None if no BPDU has been
    # heard
    def best_bpdu_over_all(self):
        best_bpdu = None
        port_heard_on = None
        for port in self.ports:
            port.clean_bpdus()
            if len(port.bpdus_received) > 0:
                port_best_bpdu = port.get_best_bpdu()
                if best_bpdu is None or port_best_bpdu < best_bpdu:
                    best_bpdu = port_best_bpdu
                    port_heard_on = port.id
        return best_bpdu, port_heard_on

    def get_tasks(self):
        """
        Returns a list of port.send_bpdu() tasks
        :return: list of tasks
        """
        tasks = []
        for port in self.ports:
            tasks.append(port.send_bpdu(self.get_bpdu(port.id).serialize()))
        return tasks

    # This method sends a BPDU on all ports.  You might want to call this regularly...
    def send_bpdus(self):
        """Async function to send bpdu"""
        start = datetime.datetime.now()
        # tasks = self.get_tasks()
        # await asyncio.gather(*tasks)
        for port in self.ports:
            port.send_bpdu(self.get_bpdu(port.id).serialize())
        end = datetime.datetime.now()
        print(f"Sent BPDUS, took {(end - start).total_seconds()}s", flush=True)
        self.last_bpdu_sent = datetime.datetime.now()

    # sends a message to a particular port or to all ports other than the one the message is received from
    def send_message(self, data: str, port_known: bool, port_received_from: int, destination_port: int):
        for port in self.ports:
            # send only on enabled ports
            if port.is_active():
                if port_known and port.id == destination_port:
                    port.send(json.dumps(data).encode('utf-8'))
                elif not port_known and port_received_from != port.id:
                    port.send(json.dumps(data).encode('utf-8'))

    def process_message(self, message, port_received_on):
        """
        This method performs the logic to update the forwarding table and forward messages on the appropriate port(s)

        :param message: JSON message that was received
        :param port_received_on: 0-indexed port that the message was received on
        :return: None
        """
        if not self.port_id_to_portObj[port_received_on].is_active():
            print(f"Ignoring on port {port_received_on}", flush=True)
        else:
            destination = ""
            try:
                destination = message["dest"]
                source = message["source"]
                timestamp = datetime.datetime.now()
                # add source -> port id to forwarding table
                self.update_forwarding_table(port_received_on, source, timestamp)
            except (TypeError, KeyError) as e:
                print(repr(e), flush=True)
                return
            # port id of destination or None if it does not exist
            destination_port = self.get_port_to_send_message(destination)
            # if destination port does not exist in forwarding_table send to every port apart from port received from
            if destination_port < 0:
                print(f"Broadcasting {message['dest']} / {str(message['msg_id'])} to all active ports", flush=True)
                self.send_message(message, False, port_received_on, -1)
            # send to port only if destination is not the same as the port the message was received on
            elif destination_port != port_received_on:
                print(f"Forwarding {message['dest']} / {str(message['msg_id'])} to {destination_port}", flush=True)
                self.send_message(message, True, port_received_on, destination_port)
        if (datetime.datetime.now() - self.last_bpdu_sent).total_seconds() > 0.5:
            self.send_bpdus()

    # update port of source with timestamp
    def update_forwarding_table(self, port: int, src: str, curtime: datetime.datetime):
        self.forwarding_table[src] = (port, curtime)

    # checks if forwarding table entry is still valid. If not, deletes it and returns False
    def is_valid(self, key) -> bool:
        if (datetime.datetime.now() - self.forwarding_table[key][1]).total_seconds() <= 5:
            return True
        else:
            del self.forwarding_table[key]
            return False

    # returns port if it is in forwarding table otherwise None
    def get_port_to_send_message(self, destination: str):
        if destination in self.forwarding_table and self.is_valid(destination):
            return self.forwarding_table[destination][0]
        return -1

    # cleans the last root port and sets the new root port
    def set_root_port_status(self, port_heard_on: int):
        """
        Resets the status of the last root as a designated and sets the new root status
        :param port_heard_on: 0-indexed id of new root port
        :return: None
        """
        for port in self.ports:
            if port.status == PortStatus.ROOT and port.id != port_heard_on:
                port.status = PortStatus.DESIGNATED
        self.port_id_to_portObj[port_heard_on].status = PortStatus.ROOT

    # sets port the best BPDU was received on as the root port
    def update_root_port(self, best_bpdu_received: BPDU, port_heard_on: int):
        if self.root != best_bpdu_received.root:
            self.root = best_bpdu_received.root
            print(f"New Root: {self.root}", flush=True)
        self.root_cost = best_bpdu_received.cost + 1
        self.set_root_port_status(port_heard_on)
        print(f"Root port: {port_heard_on}", flush=True)


# Enumeration of various Port states
class PortStatus(Enum):
    DISABLED = 0
    ROOT = 1
    DESIGNATED = 2


# Definition of a port
class Port:
    def __init__(self, id, lan_port):
        """
        This class represents a port on a bridge
        :param id: 0-indexed id of the port
        :param lan_port: UDP port number of the LAN
        """
        self.id = id
        self.lan_port = lan_port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        # list of bpdus received by this port
        self.bpdus_received = []
        # status of this port. Either designated, root or disabled
        self.status = PortStatus.DESIGNATED

    # returns a bool indicating if this port is active or not d
    def is_active(self) -> bool:
        return self.status != PortStatus.DISABLED

    # returns True if bpdu has not expired and False if it has
    def is_valid_bpdu(self, bpdu: BPDU) -> bool:
        return not bpdu.is_expired()

    # cleans list of bpdus heard to remove expired ones
    def clean_bpdus(self):
        self.bpdus_received = list(filter(self.is_valid_bpdu, self.bpdus_received))

    # return the best bpdu that this port heard
    def get_best_bpdu(self):
        if len(self.bpdus_received) > 0:
            return sorted(self.bpdus_received)[0]
        else:
            return BPDU(args.bridge_id, 0, args.bridge_id, self.id)

    # convenience method that returns list of serialized BPDUs for debugging
    def return_serialized_list(self):
        return list(map(lambda p: p.serialize(), self.bpdus_received))

    # This method sends a BPDU on this port.  Right now, it only sends a
    # BPDU that says this bridge believes its the root; obviously, this
    # will need to be updated.
    def send_bpdu(self, bpdu):
        self.send(json.dumps({"source": bpdu["id"],
                              "dest": "ffff",
                              "msg_id": 0,
                              "type": "bpdu",
                              "message": bpdu
                              }).encode('utf-8'))

    # This method sends the provided byte array "data" to the LAN, using the
    # UDP connection.
    def send(self, data):
        print("Sending message on port %d" % self.id, flush=True)
        self.socket.sendto(data, ('localhost', self.lan_port))

    def try_to_add_new_bpdu(self, bpdu : dict) -> bool:
        """
        This function checks if a BPDU received is already seen before. If so, it returns False.
        Otherwise, it returns True and adds it to the list of already seen BPDUs

        :param bpdu: BPDU object to be added to the port
        :return: Boolean True if BPDU has never been seen before, False if BPDU has been seen before
        """
        self.clean_bpdus()
        BPDU_obj = BPDU(bpdu["root"], bpdu["cost"], bpdu["id"], bpdu["port"])
        if BPDU_obj in self.bpdus_received:
            # remove old one
            self.bpdus_received.remove(BPDU_obj)
            # add new one with new time
            self.bpdus_received.append(BPDU_obj)
            return False
        else:
            self.bpdus_received.append(BPDU_obj)
            return True


def begin_bridge():
    # First, grab our arguments from the command line
    # bridge_id is our bridge ID ("1234" or whatever)
    # lan_ports are the local UDP ports that we use to send/receive packets on our LAN(s)
    # Set up our ports
    print("Bridge starting up", flush=True)
    PORTS = []
    port_id_to_portObj = {}
    for i, lan_port in enumerate(args.lan_ports):
        newPort = Port(i, lan_port)
        # save port id as key with port object as value for quick lookup of object by unique id
        port_id_to_portObj[i] = newPort
        # add port to list of ports
        PORTS.append(newPort)
    sockets = list(map(lambda p: p.socket, PORTS))
    # dictionary that maps socket object to which port id it listens on
    socket_to_port = dict(map(lambda p: (p.socket, p.id), PORTS))
    bridge = Bridge(PORTS, args.bridge_id, socket_to_port, port_id_to_portObj)
    # Now we send a "hello" BPDU to all LANs to announce that we're here
    bridge.send_bpdus()

    # Main loop
    while True:
        # the subsets of the contents of the lists passed in, containing the incoming
        # data buffered and available to be read.
        readable, _, execeptable = select.select(sockets, [], sockets, 0.5)
        """
         for each the message we received,
         if its type is "bpdu", we update the spanning tree,
         if its type is "data", we update the forwarding table and send the message
         If we haven't received anything for half a second, we broadcast our BPDU
        """
        if len(readable) > 0:
            for s in readable:
                data, addr = s.recvfrom(1500)
                message = data.decode('utf-8')
                # port id that the message is received on
                port_received_on = socket_to_port[s]
                print(f"Received message: {data} on {port_received_on}", flush=True)
                try:
                    message = json.loads(message)
                    # updating the spanning tree:
                    if message["type"] == "bpdu":
                        bridge.update(message, port_received_on)
                    # updating the forwarding table and send message
                    else:
                        bridge.process_message(message, port_received_on)
                except (TypeError, KeyError) as e:
                    print(repr(e), flush=True)
        else:
            bridge.send_bpdus()


def begin_with_profiling():
    with cProfile.Profile() as p:
        begin_bridge()
    stats = pstats.Stats(p)
    stats.sort_stats(pstats.SortKey.TIME)
    stats.print_stats()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='CS 3700 bridge')
    parser.add_argument('bridge_id', type=str, help="Bridge ID (e.g., 02ab)")
    parser.add_argument('lan_ports', metavar='lan_port', type=int, nargs='+', help="UDP ports to connect to LANs")
    args = parser.parse_args()
    begin_bridge()
