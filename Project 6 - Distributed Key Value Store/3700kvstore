#!/usr/bin/env python3

import argparse
import json
import random
import select
import socket
from datetime import datetime
from enum import Enum, auto
from typing import List, Tuple
import argparse, socket, time, json, select, struct, sys, math, os
import math

BROADCAST = "FFFF"

class ReplicaState(Enum):
    FOLLOWER  = auto()
    CANDIDATE = auto()
    LEADER    = auto()

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        self.currentTerm = 0
        self.votedFor = None
        self.voteCount = 0
        self.majority = math.ceil((len(self.others) + 1) / 2)
        self.log = []
        self.commitIndex = 0
        self.lastApplied = 0
        self.nextIndex = []
        self.matchIndex = []
        self.state = ReplicaState.FOLLOWER
        self.electionTimeout = random.randint(150, 300)
        self.lastHeartBeatTime = datetime.now()

        print("Replica %s starting up with election timeout %s" % (self.id, self.electionTimeout), flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        print(f"Sending {message}")
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def processGetMessage(self, message):
        
        src = message["src"]
        dst = message["dst"]
        leader = message["leader"]
        mid = message["MID"]

        response = {"src": self.id, "dst": src, "leader": leader, "type": "fail", "MID": mid}
        self.send(response)

    def processPutMessage(self, message):
                
        src = message["src"]
        dst = message["dst"]
        leader = message["leader"]
        mid = message["MID"]

        response = {"src": self.id, "dst": src, "leader": leader, "type": "fail", "MID": mid}
        self.send(response)

    
    def processMessage(self, message):
        type = message["type"]
        
        if type == "get":
            self.processGetMessage(message)
        elif type == "put":
            self.processPutMessage(message)
        else:
            # TODO: Let's implemented process RequestVoteRPC then
            raise NotImplementedError(f"Message {type} not implemented yet")

    def hasElectionTimedOut(self):
        return (datetime.now() - self.lastHeartBeatTime).microseconds * 1000 > self.electionTimeout
    
    def sendRequestVote(self):
        msg = {
            "type": "RequestVote",
            "src": self.id,
            "dst": "FFFF",
            "term": self.currentTerm,
            "leader": "FFFF",
            "lastLogIdx": len(self.log) - 1, #TODO: Make this better
            "lastLogTerm": len(self.log) - 1 #TODO: This is crap
        }

        self.send(msg)
        
    def startElection(self):
        self.currentTerm += 1
        self.state = ReplicaState.CANDIDATE
        self.votedFor = self.id
        print(f"I {self.id} have become a candidate for term {self.currentTerm} needing {self.majority} votes to win")
        self.sendRequestVote()

    def run(self):
        while True:
            if self.hasElectionTimedOut():
                self.startElection()
            
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')
            print("Received message '%s'" % (msg,), flush=True)
            self.processMessage(json.loads(msg))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()