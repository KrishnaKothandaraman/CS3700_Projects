#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from dataclasses import dataclass
from enum import Enum, auto
from typing import Any, Dict, List, Optional
from network import Network
from table import Table

# method given in the starter code.
def our_addr(dst):
    quads = list(int(qdn) for qdn in dst.split('.'))
    quads[3] = 1
    return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

class Router:
    relations: dict[str, str] = {}
    sockets: dict[str, socket.socket] = {}
    ports: dict[str, int] = {}

    def __init__(self, asn: int, connections: List[str]) -> None:
        print("Router at AS %s starting up" % asn)
        print(connections) 
        self.asn = asn
        self.update_messages: List[Dict[str, Any]] = []
        self.withdraw_messages: List[Dict[str, Any]] = []
        self.table: Table = Table()
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor,
                      json.dumps({"type": "handshake", "src": our_addr(neighbor), "dst": neighbor, "msg": {}}))

    def send(self, network: str, message: str):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                received_message, addr = conn.recvfrom(65535)
                message_source_network = None
                for network_name, sock in self.sockets.items():
                    if sock == conn:
                        message_source_network = network_name
                        break
                msg = received_message.decode('utf-8')
                self.processMessage(json.loads(msg), message_source_network)


                print(f"Received message {msg} from {message_source_network} on {self.ports[message_source_network]}")
        return

    def handleUpdateMessage(self, msg: Dict[str, Any]) -> None:
        network_msg = msg['msg']

        src = msg['src']
        network = network_msg['network']
        netmask = network_msg['netmask']
        localpref = network_msg['localpref']
        selfOrigin = network_msg['selfOrigin']
        ASPath = network_msg['ASPath']
        origin = network_msg['origin']
        
        network_obj: Network = Network(src, network, netmask, localpref, selfOrigin, ASPath, origin)
        self.table.add_network(src, network_obj)

        self.forwardUpdateMessage(msg)

    def _sendMessageToNeighboursWithPredictate(self, msg, predicate):

        for neighbour, relation in self.relations.items():
            if predicate(neighbour):
                continue
            msg['src'] = our_addr(neighbour)
            msg['dst'] = neighbour
            self.send(neighbour, json.dumps(msg))

    def forwardUpdateMessage(self, msg):
        src = msg['src']

        if src not in self.relations:
            print("WARNING: src not in relations: {src}")
            return

        msg = {
            "type": "update",
            "src": "", #tbd
            "dst": "", #tbd,
            "msg" : {
                "network": msg['msg']["network"],
                "netmask": msg['msg']['netmask'],
                'ASPath': [self.asn] + msg['msg']['ASPath']
            }
        }
        relation = self.relations[src]
        if relation == "cust":
           self._sendMessageToNeighboursWithPredictate(msg, lambda x: x == src)
        elif relation == "peer" or relation == "prov":
            self._sendMessageToNeighboursWithPredictate(msg, lambda x: src == x or self.relations[x] != "cust")    
        else:
            print("WARNING: Unknow relationship with src: {src}. This should never happen")

    def handleWithdrawMessage(self, msg: Dict[str, Any]) -> None:
        
        src = msg['src']

        self.table.remove_networks_from_peer(src, msg['msg'])

        relation = self.relations[src]
        if relation == "cust":
           self._sendMessageToNeighboursWithPredictate(msg, lambda x: x == src)
        elif relation == "peer" or relation == "prov":
            self._sendMessageToNeighboursWithPredictate(msg, lambda x: src == x or self.relations[x] != "cust")    
        else:
            print("WARNING: Unknow relationship with src: {src}. This should never happen")

    def handleDataMessage(self, msg: Dict[str, Any], msg_src_net: str) -> None:
        
        src = msg['src']
        dst = msg['dst']
        next_hop = self.table.get_next_hop_router(dst)
        if not next_hop:
            next_hop = msg_src_net
            # no next hop. Return back to source saying no route
            msg = {
                "src": our_addr(dst),
                "dst": dst,
                "msg": {},
                "type": "no route"
            }
        else:
            msg['src'] = our_addr(next_hop)
            msg['dst'] = dst
        
        src_relation = self.relations[msg_src_net]
        dst_relation = self.relations[next_hop]
        if next_hop != msg_src_net and (src_relation != "cust" and dst_relation != "cust"):
            print(f"Dropping data message since next hop: {next_hop} is not a valid relationship {dst_relation}")
            msg['type'] = "no route"
            msg['msg'] = {}
            msg['dst'] = msg_src_net
            msg['src'] = our_addr(msg_src_net)

        print(f"Forwarding/Responding to data message with {msg} on {next_hop}")
        self.send(next_hop, json.dumps(msg))



    def handleDumpMessage(self, msg: Dict[str, Any]) -> None:
        
        src = msg['src']
        
        table_contents = self.table.dump()
        msg = {
            'src': our_addr(src),
            'dst': src,
            "type": "table",
            "msg": table_contents
        }

        self.send(msg['dst'], json.dumps(msg))



    def processMessage(self, msg, msg_source_net):

        if msg['type'] == "update":
            self.handleUpdateMessage(msg)
        elif msg['type'] == "withdraw":
            self.handleWithdrawMessage(msg)
        elif msg["type"] == "data":
            self.handleDataMessage(msg, msg_source_net)
        elif msg['type'] == "dump":
            self.handleDumpMessage(msg)
        else:
            assert False, f"Message {msg['type']} not implemented yet"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
