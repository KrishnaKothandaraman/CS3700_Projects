#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import datetime
from typing import Dict, Tuple
from sender_window import SenderWindow

DATA_SIZE = 1375
MAX_WINDOW_SIZE = 4


def log(message):
    sys.stderr.write(message + "\n")
    sys.stderr.flush()


def is_expired(sent_time: datetime.datetime) -> bool:
    return (datetime.datetime.now() - sent_time).total_seconds() > 2


class Sender:
    tcp_buffer: SenderWindow
    packetTimer: Dict[int, datetime.datetime]

    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.tcp_buffer = SenderWindow(MAX_WINDOW_SIZE)
        self.packetTimer = {}
        self.all_data_sent = False

    def send(self, message, seq_no: int) -> None:
        """
        Method to send a packet to self.host and self.remote_port and records send time of seq_no
        :param seq_no: Seq_no of packet
        :param message: Message to be sent
        """
        self.packetTimer[seq_no] = datetime.datetime.now()
        log("Sending message '%s'" % message)
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]

            if not socks:
                self.send_expired_data()
                continue

            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    try:
                        msg = json.loads(k.decode('utf-8'))
                    except ValueError:
                        log("Invalid json received")
                        continue
                    log("Received message '%s'" % msg)

                    received_seq_no = msg["header"]["sno"]
                    self.tcp_buffer.set_ack_no(received_seq_no)

                    if received_seq_no in self.packetTimer:
                        del self.packetTimer[received_seq_no]

                    self.waiting = False
                    self.send_expired_data()
                    self.send_new_data()

                    if self.all_data_sent:
                        self.try_to_exit()

                elif conn == sys.stdin:

                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        self.all_data_sent = True
                        self.try_to_exit()
                        continue

                    self.send_expired_data()
                    self.send_new_data(data)

    def try_to_exit(self):
        if self.tcp_buffer.all_data_acked():
            log("All done!")
            sys.exit(0)

    def send_expired_data(self):
        for seq_no in self.packetTimer:
            if not is_expired(self.packetTimer[seq_no]):
                continue
            log(f"Expired {seq_no}")
            data = self.tcp_buffer.get_data_from_seq_no(seq_no)
            if data == "":
                continue
            msg = {"header": {"sno": seq_no}, "body": {"type": "msg", "data": data}}
            log(f"Retransmitting {seq_no}")
            self.send(msg, seq_no)

    def send_new_data(self, data: str = "") -> None:
        if data:
            self.tcp_buffer.add_data(data)
        data_to_send = self.tcp_buffer.get_data_to_send()
        if not data_to_send:
            self.waiting = True
            return

        for seq_no, data in data_to_send:
            msg = {"header": {"sno": seq_no}, "body": {"type": "msg", "data": data}}
            self.send(msg, seq_no)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
