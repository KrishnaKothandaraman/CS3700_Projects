#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from receiver_window import ReceiverWindow
from typing import List, Tuple
import hashlib


def log(message):
    sys.stderr.write(message + "\n")
    sys.stderr.flush()


def validate_checksum(seq_no: int, data: str, checksum) -> bool:
    """Validates that the message received is not corrupted"""
    return hashlib.md5((str(seq_no) + data).encode('utf-8')).hexdigest() == checksum


class Receiver:
    """Mimics a receiver during TCP data exchange"""
    tcp_buffer: ReceiverWindow
    next_expected_packet: int

    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.next_expected_packet = 0
        self.tcp_buffer = ReceiverWindow()
        log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def run(self):
        """Main run method"""
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]
                try:
                    msg = json.loads(data.decode('utf-8'))
                    received_seq_no = msg["header"]["sno"]
                    received_data = msg["body"]["data"]
                    checksum = msg["checksum"]

                    if not validate_checksum(received_seq_no, received_data, checksum):
                        log("Dropping broken Json")
                        continue
                except (ValueError, KeyError):
                    log("Dropping broken Json")
                    continue
                log("Received data message %s" % msg)

                # sack skeleton has been added. Can be used later on but will rely on RTT estimation to handle packet
                # losses for now.

                if received_seq_no == self.next_expected_packet:
                    self.send({"header": {"sno": received_seq_no, "sack": []}, "body": {"type": "ack"}})
                    self.tcp_buffer.add(received_seq_no, received_data)
                    self.next_expected_packet += 1
                    self.print_data(self.tcp_buffer.flush())

                else:
                    self.tcp_buffer.add(received_seq_no, received_data)
                    self.send({"header": {"sno": received_seq_no, "sack": self.tcp_buffer.get_buffer_seq_nos()},
                               "body": {"type": "ack"}})

    def print_data(self, packet: List[Tuple[int, str]]) -> None:
        """Prints received data in order"""
        if not packet:
            return

        for _, data in packet:
            print(data, end="")
        self.next_expected_packet = packet[len(packet) - 1][0] + 1


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
