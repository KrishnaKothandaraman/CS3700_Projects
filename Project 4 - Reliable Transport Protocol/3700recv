#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from receiver_window import ReceiverWindow
from typing import List, Tuple


def log(message):
    sys.stderr.write(message + "\n")
    sys.stderr.flush()


class Receiver:
    tcp_buffer: ReceiverWindow

    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.next_expected_packet = 0
        self.tcp_buffer = ReceiverWindow()
        log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]
                try:
                    msg = json.loads(data.decode('utf-8'))
                except ValueError:
                    log("Broken json")
                    sys.exit(1)
                log("Received data message %s" % msg)

                # Print out the data to stdout
                received_seq_no = msg["header"]["sno"]
                received_data = msg["body"]["data"]

                if received_seq_no != self.next_expected_packet:
                    if self.tcp_buffer.already_buffered(received_seq_no):
                        continue
                    else:
                        self.tcp_buffer.add(received_seq_no, received_data)
                else:
                    # TODO: This can be made async potentially
                    self.tcp_buffer.add(received_seq_no, received_data)
                    printable_data = self.tcp_buffer.flush()
                    self.print_data(printable_data)

                    # Always send back an ack
                    self.send({"header": {"sno": msg["header"]["sno"]}, "body": {"type": "ack"}})

    # TODO: This can be made async too
    def print_data(self, packet: List[Tuple[int,str]]) -> None:
        for _, data in packet:
            print(data, end="")
        self.next_expected_packet = packet[len(packet) - 1][0] + 1



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()